const express = require("express");
const { createServer } = require("node:http");
const { join } = require("node:path");
const { Server } = require("socket.io");
const session = require("express-session");
// ################################### CORS support #################################
/*
const cors = require("cors");
    
const corsOptions = {
    origin: ["http://localhost:4200"],
    credentials: true
};

// for Express
app.use(cors(corsOptions));

// for Socket.IO
const io = new Server(httpServer, {
    cors: corsOptions
});
// ####################################################################################
*/

const port = process.env.PORT || 8080;

const app = express();
const httpServer = createServer(app);

const sessionMiddleware = session({
    secret: "changeit",
    resave: true,
    saveUninitialized: true,
});

app.use(sessionMiddleware);

app.get("/", (req, res) => {
    res.sendFile(join(__dirname, "TESTS_index.html"));
});

app.post("/incr", (req, res) => {
    const session = req.session;
    session.count = (session.count || 0) + 1;
    res.status(200).end("" + session.count);

    io.to(session.id).emit("current count", session.count);
});

const io = new Server(httpServer);
// The session context can be shjared with the Socket.IO server by calling:
io.engine.use(sessionMiddleware);

const SESSION_RELOAD_INTERVAL = 30 * 1000;
io.on("connection", (socket) => {
    const session = socket.request.session;
    const sessionId = session.id;
    console.log(session);
    console.log(sessionId);

    // the session ID is used as a room
    socket.join(sessionId);

    // Como não está vinculado a uma única solicitação HTTP, a sessão deve ser recarregada e salva manualmente:
    const req = socket.request;

    socket.on("my event", () => {
        req.session.reload((err) => {
            if (err) {
                return socket.disconnect();
            }
            req.session.count++;
            req.session.save();
        });
    });

    // Você também pode usar um middleware que será acionado para cada pacote recebido:
    socket.on("my event", () => {
        req.session.count++;
        req.session.save();
    });

    // Você também pode querer recarregar a sessão periodicamente, caso ela expire (por exemplo, se o cliente não enviar nenhum evento por um longo período de tempo):
    const timer = setInterval(() => {
        socket.request.session.reload((err) => {
            if (err) {
                // forces the client to reconnect
                socket.conn.close();
                // you can also use socket.disconnect(), but in that case the client
                // will not try to reconnect
            }
        });
    }, SESSION_RELOAD_INTERVAL);

    socket.on("disconnect", () => {
        clearInterval(timer);
    });
});

app.post("/logout", (req, res) => {
    const sessionId = req.session.id;

    req.session.destroy(() => {
        // disconnect all Socket.IO connections linked to this session ID
        io.in(sessionId).disconnectSockets();
        res.status(204).end();
    });
});

httpServer.listen(port, () => {
    console.log(`application is running at: http://localhost:${port}`);
});